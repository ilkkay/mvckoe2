package translateit2.fileloader;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.context.support.MessageSourceAccessor;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.stereotype.Service;
import org.springframework.util.FileSystemUtils;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.time.LocalDate;
import java.util.Locale;
import java.util.stream.Stream;

import javax.annotation.PostConstruct;
import javax.validation.constraints.NotNull;

import org.springframework.context.ResourceLoaderAware;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;

@Service
public class LanguageFileLoaderService implements FileLoaderService, ResourceLoaderAware {
    
    private final Path rootLocation;
    
    private ResourceLoader resourceLoader;

    @Autowired
    public LanguageFileLoaderService(FileLoaderProperties properties) {
        this.rootLocation = Paths.get(properties.getLocation());
    }

    public void setResourceLoader(ResourceLoader resourceLoader) {
        this.resourceLoader = resourceLoader;
    }

    @Override
    public Path storeToUploadDirectory(MultipartFile file) throws FileLoaderServiceException {
        if (file.isEmpty()) 
            throw new FileToLoadIsEmptyException(file.getOriginalFilename());
        

        try(InputStream in = file.getInputStream()) {    
            
            if (in == null) 
            
                CannotReadFile
                {
                throw new FileLoaderServiceException("File:" + file.getOriginalFilename() + " not found");
            }
            
            Path target = this.rootLocation.resolve(file.getOriginalFilename());

            Path absTgtParent = target.toAbsolutePath().getParent();
            if (!Files.exists(absTgtParent))
                Files.createDirectory(target);

            if (!Files.exists(absTgtParent)) {
                throw new FileLoaderServiceException(
                        "Upload directory " + absTgtParent.toString() + " was missing and could not be recreated");
            }

            /*
             * if (Files.exists(target)) { boolean success =
             * Files.deleteIfExists(target); if (!success) { throw new
             * StorageException("File " + target.toString() +
             * " existed already and could not be removed"); } }
             */

            Path outFilePath = this.rootLocation.resolve(file.getOriginalFilename());
            Files.copy(file.getInputStream(), outFilePath, StandardCopyOption.REPLACE_EXISTING);

        } catch (IOException e) {
            throw new FileLoaderServiceException("Failed to upload file " + file.getOriginalFilename(), e);
        }
    }

    @Override
    public Stream<Path> getPathsOfDownloadableFiles() { //getFilenamesOfDownloadableFiles
        try {
            return Files.walk(this.rootLocation, 1).filter(path -> !path.equals(this.rootLocation))
                    .map(path -> this.rootLocation.relativize(path));
        } catch (IOException e) {
            throw new FileLoaderServiceException("Failed to read stored files", e);
        }

    }

    @Override
    public Path getPath(String filename) {
        return rootLocation.resolve(filename);
    }

    @Override
    public Resource loadAsResource(String filename) {
        try {
            Path file = getPath(filename);
            Resource resource = new UrlResource(file.toUri());
            // applicationContext.getResource(filename);
            // Resource resource2 = resourceLoader.getResource(filename); 
            if (resource.exists() || resource.isReadable()) {
                return resource;
            } else {
                throw new LoadedFileNotFoundException("Could not read file: " + filename);
            }

        } catch (MalformedURLException e) {
            throw new LoadedFileNotFoundException("Could not make resource from file: " + filename);
        }        
    }

    @Override
    public void deleteUploadedFiles() {
        FileSystemUtils.deleteRecursively(rootLocation.toFile());
    }

    @PostConstruct
    private void init() {
        try {
            if (Files.notExists(rootLocation)) Files.createDirectory(rootLocation);
        } catch (IOException e) {
            throw new FileLoaderServiceException("Could not initialize storage", e);
        }
    }

    @Override
    public Path getUniquePath(@NotNull String extension) {
        Path fnamePath = Paths.get(java.util.UUID.randomUUID().toString());
        Path dirPath = Paths.get(LocalDate.now().toString());
        Path path = dirPath.resolve(fnamePath);
        path = path.resolveSibling(path.getFileName() + extension);
        return path;
    }
}
