package translateit2.fileloader;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.context.support.MessageSourceAccessor;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.stereotype.Service;
import org.springframework.util.FileSystemUtils;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.time.LocalDate;
import java.util.Locale;
import java.util.stream.Stream;

import javax.annotation.PostConstruct;
import javax.validation.constraints.NotNull;

import org.springframework.context.ResourceLoaderAware;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;

@Service
public class FileLoaderServiceImpl implements FileLoaderService, ResourceLoaderAware {

    private final Path rootLocation;

    private ResourceLoader resourceLoader;

    @Autowired
    public FileLoaderServiceImpl(FileLoaderProperties properties) {
        this.rootLocation = Paths.get(properties.getLocation());
    }

    public void setResourceLoader(ResourceLoader resourceLoader) {
        this.resourceLoader = resourceLoader;
    }

    @Override
    public Path storeToUploadDirectory(MultipartFile file) throws FileLoaderServiceException {
        if (file.isEmpty()) 
            //throw new FileToLoadIsEmptyException(file.getOriginalFilename());
            throw new FileLoaderServiceException(FileLoadError.FILE_TOBELOADED_IS_EMPTY);

        Path outFilePath;
        try(InputStream in = file.getInputStream()) {    
            
            // make sure that you have a directory where to upload
            if (Files.notExists(rootLocation)) Files.createDirectory(rootLocation);
            if (Files.notExists(rootLocation)) 
                //throw new CannotCreateUploadDirectoryException(rootLocation.toString());
                throw new FileLoaderServiceException(FileLoadError.CANNOT_CREATE_UPLOAD_DIRECTORY);

            outFilePath = this.rootLocation.resolve(file.getOriginalFilename());
            Files.copy(file.getInputStream(), outFilePath, StandardCopyOption.REPLACE_EXISTING);
        } catch (IOException e) {
            //throw new CannotUploadFileException(file.getOriginalFilename(), e);
            throw new FileLoaderServiceException(FileLoadError.CANNOT_UPLOAD_FILE,e.getCause());
        }

        return outFilePath;
    }

    @Override
    public Stream<Path> getPathsOfDownloadableFiles() throws FileLoaderServiceException { 
        try {
            return Files.walk(this.rootLocation, 1).filter(path -> !path.equals(this.rootLocation))
                    .map(path -> this.rootLocation.relativize(path));
        } catch (IOException e) {
            //throw new CannotReadFileException(e.getCause());
            throw new FileLoaderServiceException(e.getCause());
        }
    }

    @Override
    public Path getPath(String filename) {
        return rootLocation.resolve(filename);
    }

    @Override
    public Resource loadAsResource(String filename) throws FileLoaderServiceException {
        try {
            Path file = getPath(filename);
            Resource resource = new UrlResource(file.toUri());

            // TODO: test alternatives
            // like applicationContext.getResource(filename);
            // or like Resource resource2 = resourceLoader.getResource(filename);

            if (resource.exists() || resource.isReadable()) {
                return resource;
            } else {
                //throw new LoadedFileNotFoundException(filename);
                throw new FileLoaderServiceException(FileLoadError.FILE_NOT_FOUND);
            }

        } catch (MalformedURLException e) {
            //throw new LoadedFileNotFoundException(filename, e.getCause());
            throw new FileLoaderServiceException(FileLoadError.FILE_NOT_FOUND, e.getCause());
        }        
    }

    @Override
    public void deleteUploadedFiles() {
        FileSystemUtils.deleteRecursively(rootLocation.toFile());
    }

    @PostConstruct
    private void init() throws FileLoaderServiceException {
        try {
            if (Files.notExists(rootLocation)) Files.createDirectory(rootLocation);
        } catch (IOException e) {
            //throw new CannotCreateUploadDirectoryException(rootLocation.toString(), e.getCause());
            throw new FileLoaderServiceException(FileLoadError.CANNOT_CREATE_UPLOAD_DIRECTORY, e.getCause());
        }
    }


    @Override
    public void deleteUploadedFile(String filename) {
        // TODO Auto-generated method stub
        
    }
}
