package translateit2.filenameresolver;

import java.nio.file.Path;
import java.util.Locale;
import java.util.function.Predicate;

import org.springframework.stereotype.Component;

import translateit2.fileloader.FileLoadError;
import translateit2.fileloader.FileLoaderException;

@Component
public class FileNameResolverImpl {

    
    /**
     * Get Locale from file name. Accepts following file naming conventions: 
     * "appname_{language}.extension"
     * "appname_{language}_{country}.extension".
     * "appname_{language}_{country}_{variant}.extension"
     * 
     */
    public Locale getLocaleFromString(String fileName, Predicate<String> p) {
        
        // check extension
        int extPos = fileName.lastIndexOf('.');
        if ((extPos > 0) && (!p.test(fileName.substring(extPos + 1)))) return null;        

        // get application name end position
        int appIndex = fileName.indexOf('_');

        // language can be found between two underscores (i.e. appname_fi_FI.extension)
        int languageIndex = fileName.indexOf('_', appIndex + 1);
        String language = null;
        if (languageIndex == -1) {
            // No further "_" so is "{language}" only
            language = fileName.substring(appIndex + 1, appIndex + 3);
            return new Locale(language, language.toUpperCase());
        } else {
            language = fileName.substring(appIndex + 1, languageIndex);
        }
        // Extract language which is exactly two characters long
        if (languageIndex - appIndex != 3) return null;

        // Extract country
        int countryIndex = fileName.indexOf('_', languageIndex + 1);
        if (countryIndex == -1)
            countryIndex = fileName.indexOf('.', languageIndex + 1);

        // Extract country which is exactly two characters long
        // end if not return only language
        if (countryIndex - languageIndex != 3) {
            return new Locale(language, language.toUpperCase());
        }

        String country = null;
        if (countryIndex == -1) {
            // No further "_" so is "{language}_{country}"
            country = fileName.substring(languageIndex + 1);
            country = country.substring(0, 2);
            return new Locale(language, country.toUpperCase());
        } else {
            // Assume all remaining is the variant so is
            // "{language}_{country}_{variant}"
            country = fileName.substring(languageIndex + 1, countryIndex);
            // String variant = localeString.substring(countryIndex+1);
            return new Locale(language, country.toUpperCase());
        }
    }
    
    @Override
    public String getApplicationName(String fileName) throws FileLoaderException {
        String appName = null;
        // check file name format i.e. appName_region_language*.properties
        // or just appName_language*.properties => reject
        appName = getAppName(fileName);
        if (appName == null)
            throw new FileLoaderException(FileLoadError .CANNOT_READ_LANGUAGE_FROM_FILE_NAME);
        
                    (messages.get("FileStorageService.code_missing")) + " " + uploadedLngFile.getFileName());

        Locale locale = getLocaleFromString(uploadedLngFile.getFileName().toString(), ext -> ext.equals("properties"));
        if (locale == null)
            throw new FileLoaderException(
                    (messages.get("FileStorageService.code_missing")) + " " + uploadedLngFile.getFileName());

        return appName;
    }
    
    // return application name otherwise null
    private String getAppName(String filename) {
        if (filename == null)
            return null;
            filename = filename.trim();

        // Extract application name
        int appIndex = filename.indexOf('_');
        if (appIndex == -1) {
            // No further "_" so this is "{application}" only file
            return null;
        } else
            return filename.substring(0, appIndex);
    }

}
