package translateit2.service;

import java.io.IOException;
import java.nio.file.Path;

import javax.transaction.Transactional;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.EnableTransactionManagement;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.multipart.MultipartFile;

import translateit2.fileloader.FileLoader;
import translateit2.filelocator.FileLocator;
import translateit2.languagefactory.LanguageFileFactory;
import translateit2.languagefactory.LanguageFileReader;
import translateit2.languagefactory.LanguageFileValidator;
import translateit2.languagefactory.LanguageFileWriter;
import translateit2.lngfileservice.LanguageFileFormat;
import translateit2.lngfileservice.LanguageFileStorage;
import translateit2.persistence.dao.ProjectRepository;
import translateit2.persistence.dao.WorkRepository;
import translateit2.persistence.dto.ProjectDto;
import translateit2.persistence.dto.ProjectMapper;
import translateit2.persistence.dto.WorkDto;
import translateit2.persistence.model.Project;
import translateit2.persistence.model.Status;
import translateit2.persistence.model.Work;
import translateit2.restapi.CustomErrorType;

@Validated
@EnableTransactionManagement
@Service
public class LoadingContractorImpl implements LoadingContractor {
    static final Logger logger = LogManager.getLogger(LoadingContractorImpl.class);

    @Autowired
    private FileLoader fileloader;

    @Autowired
    private FileLocator filelocator;

    @Autowired
    private LanguageFileFactory<LanguageFileReader, LanguageFileFormat> fileReaderFactory;

    @Autowired
    private LanguageFileFactory<LanguageFileWriter, LanguageFileFormat> fileWriterFactory;

    @Autowired
    private LanguageFileFactory<LanguageFileValidator, LanguageFileFormat> fileValidatorFactory;

    @Autowired
    private ProjectMapper modelMapper;

    @Autowired
    private ProjectRepository projectRepo;

    @Autowired
    private WorkRepository workRepo;

    
    public LoadingContractorImpl() {
        // TODO Auto-generated constructor stub
    }

    @Transactional
    private LanguageFileFormat getFormat(long workId) {
        Work work = workRepo.findOne(workId);
        return projectRepo.findOne(work.getProject().getId()).getFormat();        
    }
    
    @Override
    public ResponseEntity<?> uploadSource(MultipartFile file, long workId) {        
        if (!(workRepo.exists(workId))) {
            logger.error("Work with id {} not found.", workId);
            return new ResponseEntity<>(new CustomErrorType("Work with id " + workId + " not found"), HttpStatus.NOT_FOUND);
        }

        //if ((fileValidatorFactory.getService(getFormat(workId)).isPresent())
        LanguageFileValidator validator = fileValidatorFactory.getService(getFormat(workId)).get();
        
        validator.validate(file.getOriginalFilename(),getFormat(workId));

/*    
        Project prj = projectRepo.get Service.getProjectDtoById(wrk.getProjectId());
        LanguageFileStorage storageService = languageFileServiceFactory.getService(prj.getFormat()).get();
        Path uploadedLngFile = null;
        String appName = null;
        try {
            uploadedLngFile = storageService.storeFile(file);
            appName = storageService.checkValidity(uploadedLngFile, workId);
            storageService.uploadSourceToDb(uploadedLngFile, wrk.getId());

        } catch (IOException e) {
            logger.error("Could not upload source language file for workId {}: ", id);
            return new ResponseEntity<>(
                    new CustomErrorType("Source language file for work with id " + id + " have not been uploaded"),
                    HttpStatus.NOT_FOUND);
        }
*/
/*
        wrk = workService.getWorkDtoById(wrk.getId());
        wrk.setStatus(Status.NEW);
        wrk.setOriginalFile(appName);
        wrk = workService.updateWorkDto(wrk);
*/
        return null;
    }

    @Override
    public WorkDto uploadTarget(MultipartFile file, long workId) {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public Path downloadTarget(long workId) {
        // TODO Auto-generated method stub
        return null;
    }

}
