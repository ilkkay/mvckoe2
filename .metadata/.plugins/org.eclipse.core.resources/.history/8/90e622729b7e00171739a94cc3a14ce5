package translateit2;

import static org.assertj.core.api.Assertions.assertThatCode;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.junit.Assert.*;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.util.Date;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.web.multipart.MultipartFile;

import translateit2.fileloader.FileLoaderException;
import translateit2.persistence.dao.FileInfoRepository;
import translateit2.persistence.dao.WorkRepository;
import translateit2.persistence.model.FileInfo;
import translateit2.service.LoadingContractor;
import translateit2.service.ProjectService;

import org.springframework.mock.web.MockMultipartFile;
import org.springframework.test.context.junit4.SpringRunner;

import org.apache.commons.io.IOUtils;;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = TranslateIt2v4Application.class)
public class LoadingContractorIntegrationTests {
    static final Logger logger = LogManager.getLogger(ProjectServiceIntegrationTest.class.getName());

    @Autowired
    private FileInfoRepository fileInfoRepo;
    
    @Autowired
    private WorkRepository workRepo;
    
    @Autowired
    private LoadingContractor loadingContractor;

    @BeforeClass
    public static void setUpBeforeClass() throws Exception {
    }

    @AfterClass
    public static void tearDownAfterClass() throws Exception {
    }

    @Before
    public void setUp() throws Exception {
    }

    @After
    public void tearDown() throws Exception {
    }

    @Test
    public void uploadSourceFile_assertFileInfoHasOriginalFilename_and_BackupDirectory() throws IOException {
        long workId=1;

        // WHEN multipart file exists
        File file = new File("d:\\dotcms_fi-utf8.properties");
        FileInputStream input = new FileInputStream(file);
        MultipartFile multiPartFile = new MockMultipartFile("file",
                file.getName(), "text/plain", IOUtils.toByteArray(input));

        // THEN load to permanent system and to database
        loadingContractor.uploadSource(multiPartFile, workId);

        // assert fileinfo contains orginal filename and backup directory
        FileInfo info = fileInfoRepo.findById(workRepo.findOne(workId).getFileinfo().getId());
        
        String dateStr = Paths.get(info.getBackup_file()).getParent().getFileName().toString();
        String dateNowStr = LocalDate.now().toString();
        
        assertThat(dateStr, equalTo(dateNowStr));        
        assertThat("dotcms_fi-utf8.properties",equalTo(info.getOriginal_file()));
        
        return;
    }

    @Test
    public void reloadingSourceFile_assertCannotUploadException() throws IOException {
        long workId=1;

        // initialize multipart file 
        File file = new File("d:\\dotcms_fi-utf8.properties");
        FileInputStream input = new FileInputStream(file);
        MultipartFile multiPartFile = new MockMultipartFile("file",
                file.getName(), "text/plain", IOUtils.toByteArray(input));
        
        // and WHEN we have loaded the file
        loadingContractor.uploadSource(multiPartFile, workId);
        
        // THEN reload to the work ID
        assertThatCode(() -> { loadingContractor.uploadSource(multiPartFile, workId); } )
        .isExactlyInstanceOf(FileLoaderException.class);
        
    }
}
