Kommentit 30.5.2017

1) autoIndent => soft tabeiksi => DONE

2) commandLineRunneria pois => Käytä PostConstractia ja tee bean jossa Autowired projectService jne. DONE
    
3) init()-metodeja ei käytetä vaan PostConstructia DONE

4) appin beanit temaattiseksi config-luokiksi ja autowiren avulla tarvittavat servicet tms. DONE

5) nimeämiset kuvaaviksi (StorageService => FileLoaderService jne.)

6) tutki PathResource () filestorage (file => resource) !!
    ApplicationContextAware ja ResourceLoaderAware KESKEN

7) @ConfigurationPropertiesin yhteydessä käytä prefixinä pakettia tms. Esim. "storage" => 
    "translateit2.fileloader" => translateit2.fileloader.location = upload-dir4 DONE

8) finally testaa ettei suljettaessa ole kyseessä null stream.  DONE käyttämällä try-with-resource !!

9) try catch lohkot sen mukaan, mitkä ovat seuraukset. Jos sama seuruas niin yksi try-catch lohko.
 (tutki ISO8859TestLoader ja ISO8859ValidatorImpl-luokkaa) KESKEN

10) ISO8859Storage => Iso8859Storage DONE

11) isFormatSupported -pois koska ei ole käytössä DONE

12) resurssit resourcen alle DONE

13) refaktoroi testit java-testin alle DONE
 
14) fileloaderin throws IOException pois ja tilalle throws FileLoaderException DONE

15) column text (ei tuettu kaikissa kannoissa)  => string length = 10000 DONE

16) sourceText => source_text, jotta toimii kaikilla kannoilla KESKEN
Ongelma Optional<Person> findByFullName(@Param("fullName") String fullName);
Ei toimi jos full_name. Ongelma myös kun serialNumber => serial_number

17) Yksinkertaista enumit DONE mutta tutki vähän lisää

18) project service jaettava kahtia toinen olisi workservice DONE

19) turhat intialisoinnit pois DONE persistenceen asti

20) palauta syvemmältä vain virhekoodit älä virheviestejä. DONE filestoragen osalta

21) @Autowired ilman setteriä on OK, muuta mock-rakenteet voivat tarvita setterin esim. Messages
    DONE testejä lukuunottamatta

22) Korjaa Controllerien annotoinnit Rest-alkuisiksi, missä tarvitaan DONE

23) korjaa turhat interface public metodi -määritykset pois DONE

24) abstract factory bean joka palauttaa beaneja DONE

25) LanguageFileStorage on ajateltava uudestaan. Perusinfra DONE

26) + isValid miel. return true kuin return isValid DONE  

27) mieti vertikaali spacingin käyttöä DONE paitse languagFileService-tomintojen osalta. Ne on koodattava uudestaan.

28) turhat intialisoinnit pois DONE sama kuin edellä

29) metodit ei saa tehdä kahta asiaa yhtäaikaa!! DONE (getProDtoCount korjattu)

30) virhekoodit vai virheilmoitukset DONE (jos ratkaisu kelpaa)

31) määrittele muuttujat niin lähelle toimivaa koodia kuin mahdollista DONE (paitsi languageService)

32) javadoc ei esitä private metodien tietoja, joten (storage), siirrä public lähelle DONE

33) refaktoroi lyhenteet pois luokkien nimistä DONE (lng => language!)

34) Iso8859Storage fieldit ensin ja lopuksi setterit DONE. Mutta onko java-luokan raknne sama kuin c#:ssa
https://stackoverflow.com/questions/150479/order-of-items-in-classes-fields-properties-constructors-methods
entä Eclipsen tai Idean järjestys ???

+ ja sitten testauksen koodikirjaston scopeiksi test 
+ https://blog.pragmasphere.com/2014/06/05/maven-and-test-dependencies/

+ tutki method reference :: (<= lambda)

+ cleanappiin poista koodit jotka eivät ole käytössä, koska ne löytyvät gitistä

+ metodit ei saa tehdä kahta asiaa yhtäaikaa!!

+ storeBackUp Dtoita tarjotaan ulospäin niitä ei näy sisäisisssä koodeissa ??

+ virheilmoitukset käytä parametreja kaarisulut ja numerot ??

+ annotoinnit gettereihin riittää koska ensi tungetaan ja validointi lukee ne ??

+ sql konvertointi suoraan dependencyn avulla

+ käytä final virheiden getCharset oma resolver tms. ??

+ IsoTestLoader siivoa pois



+ Älä laita useampaa transaktiota saman rest tms. tason kutsuun esim. createProjectDto Rest-tasolla

+ controller-taso ei sisällä logiikkaa vain service-tason komentoja 

================================================================================

Korjaa seuraavat:

+ tämä pitää korjata! LocalDate expected = LocalDate.parse("2017-10-07");
  niin että ei tarvitse käsin asettaa joka kerta  

+ deleteUploadedFiles() ei ole käytössä, joten upload-hakemistoon kerääntyy tiedostoja

+ assertThat(p.getParent().toString(), is(equalTo("upload-dir3"))); korjaa upload-dir3

+ web-hakemiston testitiedstojen merkitys

+  lisää   @Override
    public String toString() { .. } entiteetteihin
    
+ testaa storeToUploadDirectory-metodia

+ tutki virhekoodin palauttaminen 

@ControllerAdvice(basePackageClasses = FooController.class)
public class FooControllerAdvice extends ResponseEntityExceptionHandler {

   @ExceptionHandler(MyException.class)
   public ResponseEntity<Message> handleRequestErrorMyException(HttpServletRequest request, MyException myException) {
        HttpStatus status = HttpStatus.valueOf(myException.getStatus();
        return new ResponseEntity<>(new CustomErrorType(status.value(), ex.getMessage()), status);
    }

}

  
  + UnitValidatorissa ja Workvalidatorsissa on outo setteri!!

  + tutki kohtaa ProjectDto createProjectDto(ProjectDto entity) ja sen rivejä
  
        perProject.setPerson(personRepo.findOne(entity.getPersonId()));
        perProject.setInfo(infoRepo.findOne(entity.getInfoId()));
        
        miksi nämä tarvitaan? Eikö id ole jo asetettu. Ei ole koska id:t on long Dto:ssa 
        ja olion entiteetissä. Jos näin niin sitten testaukset pitäisi olla kattavammat tms.
        
        
  + korjaa class Messagesin locale käyttö      
        
        
        
  